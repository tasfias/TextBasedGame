package parser;

import java.util.ArrayList;

/**
 * The {@code Tokeniser} class is responsible for converting a string input into a list of tokens
 * that can be parsed into commands by the game.
 *
 * <p>
 * The tokeniser identifies keywords, variables, and special symbols, assigning each a {@code TokenType}.
 * </p>
 */
public class Tokeniser {

    private ArrayList<Token> tokens;

    public Tokeniser(){
        this.tokens = new ArrayList<>();
    }

    /**
    Retrieves the list of tokens generated by the tokeniser.
    Returns:
    an ArrayList of Token objects
    */
    public ArrayList<Token> getTokens(){
        return tokens;
    }

    /**
    Sanitises the input string by converting it to lowercase and trimming whitespace.
    Parameters:
    s - the input string to sanitise
    Returns:
    the sanitised string
    */
    public String sanitise(String s){
        if(s == null){
            return null;
        }
        return s.trim().toLowerCase();
    }

    /**
    Tokenises the input string into a list of Token objects based on predefined keywords and patterns.
    Keywords such as "move", "get", "drop", and others are assigned specific TokenTypes. Words that do not match keywords are treated as variables and assigned the VAR type.

    Parameters:
    s - the input string to tokenise
    */
    public void tokenise(String s){
        tokens.clear();
        s = sanitise(s);

        String[] words = s.split("\\s+");

        for(String word: words) {
            TokenType type = getTokenType(word);

            if(type == TokenType.ERROR){
                tokens.add(new Token(type, word));
            } else if(type == TokenType.VAR){
                tokens.add(new Token(type, word));
            } else{
                tokens.add(new Token(type, word));
            }
        }
        tokens.add(new Token(TokenType.EOL));
    }

    private TokenType getTokenType(String word){
        switch(word){
            case "use":
                return TokenType.USE;
            case "get":
                return TokenType.GET;
            case "drop":
                return TokenType.DROP;
            case "look":
                return TokenType.LOOK;
            case "status":
                return TokenType.STATUS;
            case "help":
                return TokenType.HELP;
            case "quit":
                return TokenType.QUIT;
            case "move":
                return TokenType.MOVE;
            case "combine":
                return TokenType.COMBINE;
            case "on":
                return TokenType.PREPOSITION;
            case "using":
                return TokenType.PREPOSITION;
            case "with":
                return TokenType.PREPOSITION;
            case "and":
                return TokenType.PREPOSITION;
            default:
                return TokenType.VAR;
        }
    }
}
